[package]
name = "gls"
description = "Support gitleaks config development and extend some gitleaks features."
version = "0.3.0"
edition = "2024"
readme = "README.md"
homepage = "https://github.com/Finatext/gls"
repository = "https://github.com/Finatext/gls"
license = "MIT"
keywords = ["gitleaks", "secrets-scanning", "code-scanning", "security", "git"]
categories = ["command-line-utilities"]

[dependencies]
anyhow = { version = "1", features = ["backtrace"] }
chrono = { version = "0", features = ["serde"] }
clap = { version = "4", features = ["derive", "env"] }
rayon = "1"
regex = "1"
serde = { version = "1", features = ["derive"] }
serde_json = "1"
tabled = "0"
tempfile = "3"
toml = "0"
toml_edit = { version = "0" }

[dev-dependencies]
assert_cmd = "2"
indoc = "2"
predicates = "3"
semver = "1"

[lints.clippy]
# Enable some restriction lints.
absolute_paths = "warn"
as_conversions = "warn"
as_underscore = "warn"
assertions_on_result_states = "warn"
clone_on_ref_ptr = "warn"
create_dir = "warn"
dbg_macro = "warn"
deref_by_slicing = "warn"
disallowed_script_idents = "warn"
else_if_without_else = "warn"
empty_structs_with_brackets = "warn"
error_impl_error = "warn"
exit = "warn"
expect_used = "warn"
filetype_is_file = "warn"
float_cmp_const = "warn"
fn_to_numeric_cast_any = "warn"
format_push_string = "warn"
get_unwrap = "warn"
if_then_some_else_none = "warn"
impl_trait_in_params = "warn"
indexing_slicing = "warn"
inline_asm_x86_att_syntax = "warn"
inline_asm_x86_intel_syntax = "warn"
integer_division = "warn"
large_include_file = "warn"
let_underscore_must_use = "warn"
let_underscore_untyped = "warn"
lossy_float_literal = "warn"
map_err_ignore = "warn"
mem_forget = "warn"
mixed_read_write_in_expression = "warn"
mod_module_files = "warn"
modulo_arithmetic = "warn"
multiple_inherent_impl = "warn"
mutex_atomic = "warn"
needless_raw_strings = "warn"
panic = "warn"
partial_pub_fields = "warn"
pub_without_shorthand = "warn"
rc_buffer = "warn"
rc_mutex = "warn"
redundant_type_annotations = "warn"
ref_patterns = "warn"
rest_pat_in_fully_bound_structs = "warn"
same_name_method = "warn"
semicolon_inside_block = "warn"
single_char_lifetime_names = "warn"
str_to_string = "warn"
string_add = "warn"
string_lit_chars_any = "warn"
string_slice = "warn"
string_to_string = "warn"
suspicious_xor_used_as_pow = "warn"
tests_outside_test_module = "warn"
todo = "warn"
try_err = "warn"
undocumented_unsafe_blocks = "warn"
unimplemented = "warn"
unnecessary_safety_comment = "warn"
unnecessary_safety_doc = "warn"
unnecessary_self_imports = "warn"
unneeded_field_pattern = "warn"
unseparated_literal_suffix = "warn"
unwrap_in_result = "warn"
unwrap_used = "warn"
use_debug = "warn"
verbose_file_reads = "warn"
wildcard_enum_match_arm = "warn"

# Enable all pedantic lints.
pedantic = { level = "warn", priority = -1 }
# Disable some pedantic lints.
missing_errors_doc = "allow"
module_name_repetitions = "allow"
if_not_else = "allow"

# Enable all nursery lints.
nursery = { level = "warn", priority = -1 }
